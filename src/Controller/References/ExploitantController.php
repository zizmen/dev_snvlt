<?php

namespace App\Controller\References;


use App\Entity\References\Exploitant;
use App\Form\References\ExploitantType;
use App\Repository\Administration\NotificationRepository;
use App\Repository\GroupeRepository;
use App\Repository\MenuPermissionRepository;
use App\Repository\MenuRepository;
use App\Repository\References\ExploitantRepository;
use App\Repository\UserRepository;
use Doctrine\Persistence\ManagerRegistry;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\JsonResponse;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;
use Symfony\Contracts\Translation\TranslatorInterface;

class ExploitantController extends AbstractController
{
    public function __construct(private TranslatorInterface $translator)
    {
    }

    #[Route('snvlt/ref/exploitants', name: 'ref_exploitants')]
    public function listing(ExploitantRepository $exploitants,
    MenuRepository $menus,
        MenuPermissionRepository $permissions,
        GroupeRepository $groupeRepository,
        UserRepository $userRepository,
        ManagerRegistry $doctrine,
        Request $request,
        NotificationRepository $notificationRepository,
        ): Response
    {
        if(!$request->getSession()->has('user_session')){

            return $this->redirectToRoute('app_login');
        } else {
            if ($this->isGranted('ROLE_MINEF') or  $this->isGranted('ROLE_ADMIN'))
            {
                $user = $userRepository->find($this->getUser());
                $code_groupe = $user->getCodeGroupe()->getId();
                $titre = $this->translator->trans("Edit Forester");

                return $this->render('references/exploitant/index.html.twig', [
                    'liste_exploitants' => $exploitants->findAll(),
                    'liste_menus'=>$menus->findOnlyParent(),
                    'mes_notifs'=>$notificationRepository->findBy(['to_user'=>$user, 'lu'=>false],[],5,0),
                    "all_menus"=>$menus->findAll(),
                    'menus'=>$permissions->findBy(['code_groupe_id'=>$code_groupe]),
                    'groupe'=>$code_groupe,
                    'titre'=>$titre,
                    'liste_parent'=>$permissions
                ]);
            } else {
                return $this->redirectToRoute('app_no_permission_user_active');
            }
       }
        }

    #[Route('snvlt/ref/exploitants/data_json', name: 'json_exploitants')]
    public function exploitants_json(ExploitantRepository $exploitants,
                            MenuRepository $menus,
                            MenuPermissionRepository $permissions,
                            GroupeRepository $groupeRepository,
                            UserRepository $userRepository,
                            ManagerRegistry $doctrine,
                            Request $request,
                            NotificationRepository $notificationRepository,
    ): Response
    {
        if(!$request->getSession()->has('user_session')){

            return $this->redirectToRoute('app_login');
        } else {
            if ($this->isGranted('ROLE_MINEF') or  $this->isGranted('ROLE_ADMIN'))
            {
                $user = $userRepository->find($this->getUser());
                $code_groupe = $user->getCodeGroupe()->getId();

                $response = array();
                $liste_exploitants = $exploitants->findBy([], ['raison_sociale_exploitant'=>'ASC']);
                foreach ( $liste_exploitants as $exploitant){
                    $response[] =  array(
                        'id'=>$exploitant->getId(),
                        'sigle'=>$exploitant->getSigle(),
                        'rs'=>$exploitant->getRaisonSocialeExploitant()
                    );


                }
                return  new  JsonResponse(json_encode($response));

            } else {
                return $this->redirectToRoute('app_no_permission_user_active');
            }
        }
    }

    #[Route('snvlt/ref/exploitants/search/{id_exploitant}/data_json', name: 'json_exploitant_by_id')]
    public function exploitant_by_id_json(ExploitantRepository $exploitants,
                                     MenuRepository $menus,
                                     MenuPermissionRepository $permissions,
                                     GroupeRepository $groupeRepository,
                                     UserRepository $userRepository,
                                     ManagerRegistry $doctrine,
                                     Request $request,
                                     Exploitant $single_exploitant = null,
                                     int $id_exploitant,
                                     NotificationRepository $notificationRepository,
    ): Response
    {
        if(!$request->getSession()->has('user_session')){

            return $this->redirectToRoute('app_login');
        } else {
            if ($this->isGranted('ROLE_MINEF') or  $this->isGranted('ROLE_ADMIN'))
            {
                $user = $userRepository->find($this->getUser());
                $code_groupe = $user->getCodeGroupe()->getId();

                $single_exploitant = $doctrine->getRepository(Exploitant::class)->find($id_exploitant);
                if($single_exploitant){
                    $response = array();

                        $response[] =  array(
                            'id'=>$single_exploitant->getId(),
                            'sigle'=>$single_exploitant->getSigle(),
                            'rs'=>$single_exploitant->getRaisonSocialeExploitant(),
                            'personne_ressource'=>$single_exploitant->getPersonneRessource(),
                            'email_personne_ressource'=>$single_exploitant->getEmailPersonneRessource(),
                            'mobile_personne_ressource'=>$single_exploitant->getMobilePersonneRessource(),
                            'mobile'=>$single_exploitant->getMobileExploitant(),
                            'adresse'=>$single_exploitant->getAdresseExploitant(),
                            'cc'=>$single_exploitant->getNccExploitant()
                        );



                    return  new  JsonResponse(json_encode($response));
                }else {
                    return  new  JsonResponse(json_encode("NO OPERATOR SELECTED"));
                }


            } else {
                return $this->redirectToRoute('app_no_permission_user_active');
            }
        }
    }

    #[Route('/edit/exploitants/{id_exploitant?0}', name: 'exploitant.edit')]
    public function editExploitant(
        Exploitant $exploitant = null,
        ManagerRegistry $doctrine,
        Request $request,
        ExploitantRepository $exploitants,
        MenuPermissionRepository $permissions,
        MenuRepository $menus,
        GroupeRepository $groupeRepository,
        UserRepository $userRepository,
        int $id_exploitant,
        NotificationRepository $notificationRepository,): Response
    {
        if(!$request->getSession()->has('user_session')){

            return $this->redirectToRoute('app_login');
        } else {
            if ($this->isGranted('ROLE_MINEF') or  $this->isGranted('ROLE_ADMIN'))
            {
                $user = $userRepository->find($this->getUser());
                $code_groupe = $user->getCodeGroupe()->getId();
        $titre = $this->translator->trans("Edit Forester");
        $exploitant = $exploitants->find($id_exploitant);
        //dd($exploitant);
        if(!$exploitant){
            $new = true;
            $exploitant = new Exploitant();
            $titre = $this->translator->trans("Add Forester");
        }

            $new = false;
            if(!$exploitant){
                $new = true;
                $exploitant = new Exploitant();
            }
            $form = $this->createForm(ExploitantType::class, $exploitant);

            $form->handleRequest($request);

            if ( $form->isSubmitted() && $form->isValid() ){



                $manager = $doctrine->getManager();
                $manager->persist($exploitant);
                $manager->flush();

                $this->addFlash('success', $this->translator->trans("The forester has been updated successfuylly"));
                return $this->redirectToRoute("ref_exploitants");
            } else {
                return $this->render('references/exploitant/add-exploitant.html.twig',[
                    'form' =>$form->createView(),
                    'titre'=>$titre,
                    'liste_exploitants' => $exploitants->findAll(),
                    'liste_menus'=>$menus->findOnlyParent(),
                    'mes_notifs'=>$notificationRepository->findBy(['to_user'=>$user, 'lu'=>false],[],5,0),
                    "all_menus"=>$menus->findAll(),
                    'menus'=>$permissions->findBy(['code_groupe_id'=>$code_groupe]),
                    'groupe'=>$code_groupe,
                    'liste_parent'=>$permissions
                ]);
            }
        } else {
                return $this->redirectToRoute('app_no_permission_user_active');
            }
        }

    }
}
